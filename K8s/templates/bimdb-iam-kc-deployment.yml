apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.iam.appName }}-deployment"
  namespace: "{{ .Values.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.iam.appName }}-deployment"
  template:
    metadata:
      labels:
        app: "{{ .Values.iam.appName }}-deployment"
    spec:
      containers:
      - env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.iam.appName }}-credentials
              key: userName
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.iam.appName }}-credentials
              key: userPassword
        - name: DB_VENDOR
          value: postgres
        - name: DB_ADDR
          value: {{ .Values.db.iam.appName }}-service
        - name: DB_PORT
          value: {{ .Values.db.iam.containerPort }}
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.iam.appName }}-credentials
              key: databaseName
        - name: DB_SCHEMA
          value: public
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.iam.appName }}-credentials
              key: userName
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.iam.appName }}-credentials
              key: userPassword
        image: "quay.io/keycloak/keycloak:{{ .Values.iam.imageTag }}"
        args: ["start-dev"]
        imagePullPolicy: IfNotPresent
        name: "{{ .Values.iam.appName }}-deployment"
        ports:
        - containerPort: {{ .Values.db.containerPort }}
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      terminationGracePeriodSeconds: 60
  updateStrategy:
    type: RollingUpdate