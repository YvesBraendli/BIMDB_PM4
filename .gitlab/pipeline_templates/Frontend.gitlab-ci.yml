frontend-lint:
  image: timbru31/node-chrome:hydrogen-alpine
  before_script:
    - cd frontend/bimdb/
    - npm ci --cache .npm --prefer-offline
  stage: lint
  script:
    - npm run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - frontend/**/*

frontend-test:
  image: timbru31/node-chrome:hydrogen-alpine
  stage: test
  coverage: /(\d*.?\d+)%/
  before_script:
    - export CHROME_BIN=/usr/bin/chromium-browser
    - cd frontend/bimdb/
    - npm ci --cache .npm --prefer-offline
  script:
    # Run Headless Chrome needs a node-chrome image and passing of parameters
    - npm run test:ci
  artifacts:
    reports:
      junit: "frontend/bimdb/reports/ng-test.xunit.xml"
      coverage_report:
        coverage_format: cobertura
        path: "frontend/bimdb/reports/ng-coverage.cobertura.xml"
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main' || $CI_COMMIT_REF_NAME == 'development'
    # - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    #   changes:
    #     - frontend/**/*

frontend-package:
  stage: package
  services:
    - docker:20.10.24-dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE:frontend-latest || true
    # builds the project using OCI labels
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to
    # the GitLab registry
    - >
      cd frontend && DOCKER_BUILDKIT=1 docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:frontend-latest
      --label "org.opencontainers.image.title=BIMDB Frontend"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:frontend-$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:frontend-$CI_COMMIT_SHA
#  rules:
#    - if: $CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "development"

# Here, the goal is to tag the "main" branch as "latest"
frontend-tag-latest:
  variables:
    # We are just playing with Docker here.
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  services:
    - docker:20.10.24-dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:frontend-$CI_COMMIT_SHA
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:frontend-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:frontend-latest
    # And we push it.
    - docker push $CI_REGISTRY_IMAGE:frontend-latest
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
